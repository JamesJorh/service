import sys
import os
import json
import http.server
import socketserver
import requests
import logging
import appdirs
import subprocess
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel, QProgressBar, \
    QMessageBox, QStyle
from PyQt6.QtCore import QThread, pyqtSignal, QTimer, QSize, PYQT_VERSION_STR
from PyQt6.QtGui import QIcon

# Set up logging
logging.basicConfig(filename='app_log.txt', level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

VERSION = "1.0.0"
APP_NAME = "PyQtUpdateApp"
COMPANY_NAME = "YourCompany"

# Specify the directory containing the update file
UPDATE_SOURCE_DIR = r"D:\updates"
UPDATE_JSON_PATH = os.path.join(UPDATE_SOURCE_DIR, "update.json")
UPDATE_EXE_PATH = os.path.join(UPDATE_SOURCE_DIR, "ademo.exe")

# Use appdirs to get a user-writable directory for updates
user_data_dir = appdirs.user_data_dir(APP_NAME, COMPANY_NAME)
UPDATE_DIR = os.path.join(user_data_dir, "Updates")
os.makedirs(UPDATE_DIR, exist_ok=True)

UPDATE_URL = None  # Will be set dynamically


class LocalUpdateServer(QThread):
    port_assigned = pyqtSignal(int)

    def run(self):
        try:
            os.chdir(UPDATE_SOURCE_DIR)
            Handler = http.server.SimpleHTTPRequestHandler
            with socketserver.TCPServer(("localhost", 0), Handler) as httpd:
                port = httpd.server_address[1]
                logging.info(f"Serving updates from {UPDATE_SOURCE_DIR} at port {port}")
                self.port_assigned.emit(port)
                httpd.serve_forever()
        except Exception as e:
            logging.error(f"Error in local update server: {e}")


class DownloadThread(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(str)
    error = pyqtSignal(str)

    def __init__(self, url, destination):
        super().__init__()
        self.url = url
        self.destination = destination

    def run(self):
        try:
            response = requests.get(self.url, stream=True)
            response.raise_for_status()
            total_size = int(response.headers.get('content-length', 0))
            block_size = 1024  # 1 KB
            downloaded = 0

            with open(self.destination, 'wb') as file:
                for data in response.iter_content(block_size):
                    file.write(data)
                    downloaded += len(data)
                    if total_size > 0:
                        progress = int((downloaded / total_size) * 100)
                        self.progress.emit(progress)

            self.finished.emit(self.destination)
        except Exception as e:
            logging.error(f"Error downloading update: {e}")
            self.error.emit(str(e))


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        logging.info("Initializing MainWindow")
        try:
            self.setWindowTitle(f"{APP_NAME} - 自动更新示例")
            self.setGeometry(100, 100, 300, 200)

            layout = QVBoxLayout()

            self.version_label = QLabel(f"当前版本: {VERSION}")
            layout.addWidget(self.version_label)

            self.update_button = QPushButton("检查更新")
            self.update_button.clicked.connect(self.handle_update_button)
            layout.addWidget(self.update_button)

            self.progress_bar = QProgressBar()
            self.progress_bar.setVisible(False)
            layout.addWidget(self.progress_bar)

            container = QWidget()
            container.setLayout(layout)
            self.setCentralWidget(container)

            self.local_server = LocalUpdateServer()
            self.local_server.port_assigned.connect(self.set_update_url)
            self.local_server.start()

            # Wait for the server to start and emit the port
            QTimer.singleShot(1000, self.check_server_started)

            # Automatically check for updates when the app starts
            QTimer.singleShot(2000, self.check_update)

            self.update_available = False

            # Print PyQt version for debugging
            print(f"PyQt version: {PYQT_VERSION_STR}")

            logging.info("MainWindow initialization complete")
        except Exception as e:
            logging.error(f"Error in MainWindow initialization: {e}")
            raise

    def check_server_started(self):
        if UPDATE_URL is None:
            logging.error("Local server did not start properly")
            QMessageBox.critical(self, "错误", "本地更新服务器未能正确启动")

    def set_update_url(self, port):
        global UPDATE_URL
        UPDATE_URL = f"http://localhost:{port}/ademo.exe"
        logging.info(f"Update URL set to {UPDATE_URL}")

    def check_update(self):
        logging.info("Checking for updates")
        try:
            with open(UPDATE_JSON_PATH, 'r') as f:
                update_info = json.load(f)

            latest_version = update_info.get('version')
            if latest_version and self.compare_versions(latest_version, VERSION) > 0:
                self.version_label.setText(f"当前版本: {VERSION}\n可用更新: {latest_version}")
                self.update_available = True
                self.update_button.setText("更新可用")
                self.set_update_icon()
            else:
                self.update_available = False
                self.update_button.setText("检查更新")
                self.update_button.setIcon(QIcon())  # 移除图标
        except Exception as e:
            logging.error(f"Error checking for updates: {e}")

    def set_update_icon(self):
        icon_path = os.path.join(os.path.dirname(__file__), "red_dot.png")
        if os.path.exists(icon_path):
            icon = QIcon(icon_path)
            self.update_button.setIcon(icon)
            self.update_button.setIconSize(QSize(16, 16))
            logging.info(f"Update icon set from: {icon_path}")
        else:
            logging.warning(f"Icon file not found: {icon_path}")
            # 使用系统内置图标作为备选
            self.update_button.setIcon(self.style().standardIcon(QStyle.StandardPixmap.SP_BrowserReload))

    def compare_versions(self, version1, version2):
        v1_parts = [int(x) for x in version1.split('.')]
        v2_parts = [int(x) for x in version2.split('.')]
        for i in range(max(len(v1_parts), len(v2_parts))):
            v1 = v1_parts[i] if i < len(v1_parts) else 0
            v2 = v2_parts[i] if i < len(v2_parts) else 0
            if v1 > v2:
                return 1
            elif v1 < v2:
                return -1
        return 0

    def handle_update_button(self):
        if self.update_available:
            self.download_update()
        else:
            self.check_update()

    def download_update(self):
        if UPDATE_URL is None:
            QMessageBox.critical(self, "错误", "更新服务器未启动")
            return

        logging.info(f"Downloading update from {UPDATE_URL}")
        try:
            self.update_button.setEnabled(False)
            self.progress_bar.setVisible(True)
            destination = os.path.join(UPDATE_DIR, "ademo.exe")
            self.download_thread = DownloadThread(UPDATE_URL, destination)
            self.download_thread.progress.connect(self.update_progress)
            self.download_thread.finished.connect(self.download_finished)
            self.download_thread.error.connect(self.download_error)
            self.download_thread.start()
        except Exception as e:
            logging.error(f"Error starting download: {e}")
            QMessageBox.critical(self, "错误", f"开始下载时发生错误: {str(e)}")
            self.update_button.setEnabled(True)

    def update_progress(self, value):
        self.progress_bar.setValue(value)

    def download_finished(self, file_name):
        logging.info(f"Download finished: {file_name}")
        self.progress_bar.setVisible(False)
        self.update_button.setEnabled(True)
        self.install_update(file_name)

    def download_error(self, error_message):
        logging.error(f"Download error: {error_message}")
        self.progress_bar.setVisible(False)
        self.update_button.setEnabled(True)
        QMessageBox.critical(self, "下载错误", f"下载更新时发生错误: {error_message}")

    def install_update(self, file_name):
        logging.info(f"Installing update from {file_name}")
        try:
            # 启动新的exe
            subprocess.Popen([file_name])
            # 关闭当前程序
            sys.exit(0)
        except Exception as e:
            logging.error(f"Error installing update: {e}")
            QMessageBox.critical(self, "安装错误", f"安装更新时发生错误: {str(e)}")


if __name__ == "__main__":
    try:
        app = QApplication(sys.argv)
        logging.info("QApplication created")
        window = MainWindow()
        logging.info("MainWindow instance created")
        window.show()
        logging.info("MainWindow shown")
        sys.exit(app.exec())
    except Exception as e:
        logging.critical(f"Critical error in main: {e}")
        print(f"Critical error: {e}")  # Print to console as well
